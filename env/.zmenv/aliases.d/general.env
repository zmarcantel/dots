#!/usr/bin/env bash

alias svim='sudo vim'
alias gnr='grep -nr'

##
## system stats
##

alias meminfo='free -m -l -t'                   # free memory
alias psmem='ps auxf   | sort -r -k 4'          # processes sorted by memory usage
alias psmem10='ps auxf | sort -r -k 4 | head -10'   # 10 highest memory users
alias pscpu='ps auxf   | sort -r -k 3'          # processes sorted by cpu usage
alias pscpu10='ps auxf | sort -r -k 3 | head -10'   # 10 highest cpu users
alias psgrep='ps aux   | grep'

##
## navigation
##

alias ..='cd ..'
alias .2='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'
alias pud='pushd'
alias pod='popd'

mk_and_cd() {
    mkdir -p $1 && cd $1
}
alias mkcd='mk_and_cd'

##
## curl / wget / json
##

json_formatter() {
    if which jq > /dev/null 2>&1; then
        echo "jq"
        return 0
    fi

    echo "python -m json.tool"
}

curl_json() {
    if [ $# -lt 1 ]; then
        echo "no source argument given"
        return 1
    fi

    src=$1 ; shift
    curl $src 2>/dev/null | $(json_formatter) $@
}

wget_json() {
    if [ $# -lt 1 ]; then
        echo "no source argument given"
        return 1
    fi

    src=$1 ; shift
    wget -qO- $src 2>/dev/null | $(json_formatter) $@
}

get_json() {
    if which curl > /dev/null 2>&1; then
        curl_json $@
    elif which wget > /dev/null 2>&1; then
        wget_json $@
    else
        echo "wget nor curl is installed"
        return 1
    fi
}

alias jscurl='curl_json'
alias jswget='wget_json'
alias jsget='get_json'


##
## overrides
##

man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
            man "$@"
}

reallink() {
    binpath=$(which $1)
    if [ $? -ne 0 ]; then
        echo "could not find "$1
        return 1
    fi
    if [ ! -L "$binpath" ]; then
        echo $binpath
        return 0
    fi

    linkpath=$(readlink $binpath)
    if [ $? -ne 0 ]; then
        echo "could not readlink "$binpath
        return 1
    fi
    if [[ "$linkpath" == /* ]]; then
        echo $linkpath
        return 0
    fi

    echo $(dirname $binpath)/$linkpath
    return 0
}
